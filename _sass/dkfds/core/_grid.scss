/* stylelint-disable */
@import "mixins/grid-mixins";


// basic container
.container {
  @include grid-container();
  @include grid-container-max-widths();
}

// USWD changed: responsive containers removed.
// Added: different width containers based on w-percent-x utility class.  
.container[class*='w-']{
  max-width: inherit !important; //undo max-width
}


// basic row...
.row {
  @include grid-row();

  // row with no column gaps.
  &.no-gutters {
    margin-right: 0;
    margin-left: 0;
  
    > .col,
    > [class*="col-"] {
      padding-right: 0;
      padding-left: 0;
    }
  }  

  //USWD changed: responsive column gaps has been removed. 
}

// responsive columns...

// Common properties for all breakpoints
%grid-column {
  position: relative;
  width: 100%;
  min-height: 1px; // Prevent columns from collapsing when empty
  padding-right: ($grid-gutter-width / 2);
  padding-left: ($grid-gutter-width / 2);
}

@each $breakpoint in map-keys($grid-breakpoints) {
  $mq-key: breakpoint-infix($breakpoint, $grid-breakpoints);

  // Allow columns to stretch full width below their breakpoints
  @for $i from 1 through $grid-columns {
    .col#{$mq-key}-#{$i} {
      @extend %grid-column;
    }
  }
  .col#{$mq-key},
  .col#{$mq-key}-auto {
    @extend %grid-column;
  }

  @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
    // Provide basic `.col-{bp}` classes for equal-width flexbox columns
    .col#{$mq-key} {
      flex-basis: 0;
      flex-grow: 1;
      max-width: 100%;
    }
    .col#{$mq-key}-auto {
      flex: 0 0 auto;
      width: auto;
      max-width: none; // Reset earlier grid tiers
    }

    @for $i from 1 through $grid-columns {
      .col#{$mq-key}-#{$i} {
        @include grid-col($i, $grid-columns);
      }
    }

    .order#{$mq-key}-first {
      order: -1;
    }

    @for $i from 1 through $grid-columns {
      .order#{$mq-key}-#{$i} {
        order: $i;
      }
    }
  }
}


// basic offsets
@for $i from 0 through ($grid-columns - 1) { //-1 to prevent offset-12
  @if not ($i == 0) { // Avoid emitting useless .offset-0
    .offset-#{$i} {
      @include grid-offset($i, $grid-columns);
    }
  }
}
// responsive offsets
@each $breakpoint in map-keys($grid-breakpoints) {
  $mq-key: breakpoint-infix($breakpoint, $grid-breakpoints);
  @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
    @for $i from 0 through ($grid-columns - 1) { //-1 to prevent offset-12
      @if not ($mq-key == "" and $i == 0) { // Avoid emitting useless .offset-0
        .offset#{$mq-key}-#{$i} {
          @include grid-offset($i, $grid-columns);
        }
      }
    }
  }
}
/* stylelint-enable */